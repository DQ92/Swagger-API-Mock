{
  "_args": [
    [
      "fake",
      "/Users/daniel/CODE/JavaScript/Swagger-API-Mock"
    ]
  ],
  "_from": "fake@latest",
  "_id": "fake@0.2.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/fake",
  "_npmUser": {
    "email": "iam@alexindigo.com",
    "name": "alexindigo"
  },
  "_npmVersion": "1.2.18",
  "_phantomChildren": {},
  "_requested": {
    "name": "fake",
    "raw": "fake",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/fake/-/fake-0.2.2.tgz",
  "_shasum": "68fe672725ff0f5c89ba92c539b31111f122d1f3",
  "_shrinkwrap": null,
  "_spec": "fake",
  "_where": "/Users/daniel/CODE/JavaScript/Swagger-API-Mock",
  "author": {
    "email": "felix@debuggable.com",
    "name": "Felix GeisendÃ¶rfer",
    "url": "http://debuggable.com/"
  },
  "bugs": {
    "url": "https://github.com/felixge/node-fake/issues"
  },
  "dependencies": {},
  "description": "Test your JavaScript with focused programmer tests. Fake depedencies.",
  "devDependencies": {
    "far": "~0.0.7"
  },
  "directories": {},
  "dist": {
    "shasum": "68fe672725ff0f5c89ba92c539b31111f122d1f3",
    "tarball": "https://registry.npmjs.org/fake/-/fake-0.2.2.tgz"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "homepage": "https://github.com/felixge/node-fake#readme",
  "main": "./lib/fake",
  "maintainers": [
    {
      "name": "felixge",
      "email": "felix@debuggable.com"
    },
    {
      "name": "alexindigo",
      "email": "iam@alexindigo.com"
    }
  ],
  "name": "fake",
  "optionalDependencies": {},
  "readme": "**Current Status:** This library is ready for experimental usage.\n\n# Fake [![Build Status](https://travis-ci.org/alexindigo/node-fake.png?branch=master)](https://travis-ci.org/alexindigo/node-fake)\n\nTest one thing at a time, fake the rest.\n\n## Tutorial\n\nSet an expectation of a method call on an object:\n\n``` javascript\nvar fake = require('fake')();\nvar object = {};\n\nfake.expect(object, 'method');\n\nobject.method();\n```\n\nIf the last `object.method()` call is not present, an exception will be thrown.\n\nDepending on your [approach to TDD][mocksvsstubs], you may prefer to use\nstubbing over mocking instead:\n\n[mocksvsstubs]: http://martinfowler.com/articles/mocksArentStubs.html\n\n``` javascript\nvar fake = require('fake')();\nvar object = {};\n\nvar objectMethodCall = fake.stub(object, 'method');\n\nobject.method();\n\nassert.equals(objectMethodCall.calls.length, 1);\n```\n\n## API\n\n### fake.expect(object, method, [times, withArgs, andReturn | andHandle])\n\nSet up an ordered expectation. Calling any other methods controlled by fake\nbefore this expectation has been satisifed will throw an exception.\n\n### fake.expectAnytime(object, method, [times, withArgs, andReturn | andHandle])\n\nSet up an unordered expectation. This will only throw an error if this\nexpectation is not verified before the process exits.\n\n### fake.stub(object, method, [times, withArgs, andReturn | andHandle])\n\nSet up an optional expectation. This is useful for pre-filling return values\nfor functions, without caring if the function is ever called.\n\n## Todo\n\n* Report non-matching anytime expectations if they are the closest match\n* Move stacktrace into own module\n* Useful error reporting\n* Partial arguments matching\n* Become self-testing\n* Documentation\n* Handle fake functions being claimed by multiple fakes\n* NodeModuleScene / BrowserScriptScene?\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/felixge/node-fake.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.2.2"
}
